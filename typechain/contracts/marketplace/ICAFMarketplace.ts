/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICAFMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature: "autoList" | "buy" | "list" | "unlist" | "updatePrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ItemBought"
      | "ItemListed"
      | "ItemPriceUpdated"
      | "ItemUnlisted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "autoList", values?: undefined): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "autoList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
}

export namespace ItemBoughtEvent {
  export type InputTuple = [
    _itemId: BigNumberish,
    _buyer: AddressLike,
    _seller: AddressLike,
    _price: BigNumberish
  ];
  export type OutputTuple = [
    _itemId: bigint,
    _buyer: string,
    _seller: string,
    _price: bigint
  ];
  export interface OutputObject {
    _itemId: bigint;
    _buyer: string;
    _seller: string;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemListedEvent {
  export type InputTuple = [
    _itemId: BigNumberish,
    _owner: AddressLike,
    _price: BigNumberish
  ];
  export type OutputTuple = [_itemId: bigint, _owner: string, _price: bigint];
  export interface OutputObject {
    _itemId: bigint;
    _owner: string;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemPriceUpdatedEvent {
  export type InputTuple = [
    _itemId: BigNumberish,
    _owner: AddressLike,
    _price: BigNumberish
  ];
  export type OutputTuple = [_itemId: bigint, _owner: string, _price: bigint];
  export interface OutputObject {
    _itemId: bigint;
    _owner: string;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemUnlistedEvent {
  export type InputTuple = [_itemId: BigNumberish, _owner: AddressLike];
  export type OutputTuple = [_itemId: bigint, _owner: string];
  export interface OutputObject {
    _itemId: bigint;
    _owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICAFMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): ICAFMarketplace;
  waitForDeployment(): Promise<this>;

  interface: ICAFMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  autoList: TypedContractMethod<[], [void], "nonpayable">;

  buy: TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;

  list: TypedContractMethod<
    [_itemId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlist: TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;

  updatePrice: TypedContractMethod<
    [_itemId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "autoList"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<
    [_itemId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlist"
  ): TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [_itemId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ItemBought"
  ): TypedContractEvent<
    ItemBoughtEvent.InputTuple,
    ItemBoughtEvent.OutputTuple,
    ItemBoughtEvent.OutputObject
  >;
  getEvent(
    key: "ItemListed"
  ): TypedContractEvent<
    ItemListedEvent.InputTuple,
    ItemListedEvent.OutputTuple,
    ItemListedEvent.OutputObject
  >;
  getEvent(
    key: "ItemPriceUpdated"
  ): TypedContractEvent<
    ItemPriceUpdatedEvent.InputTuple,
    ItemPriceUpdatedEvent.OutputTuple,
    ItemPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ItemUnlisted"
  ): TypedContractEvent<
    ItemUnlistedEvent.InputTuple,
    ItemUnlistedEvent.OutputTuple,
    ItemUnlistedEvent.OutputObject
  >;

  filters: {
    "ItemBought(uint256,address,address,uint256)": TypedContractEvent<
      ItemBoughtEvent.InputTuple,
      ItemBoughtEvent.OutputTuple,
      ItemBoughtEvent.OutputObject
    >;
    ItemBought: TypedContractEvent<
      ItemBoughtEvent.InputTuple,
      ItemBoughtEvent.OutputTuple,
      ItemBoughtEvent.OutputObject
    >;

    "ItemListed(uint256,address,uint256)": TypedContractEvent<
      ItemListedEvent.InputTuple,
      ItemListedEvent.OutputTuple,
      ItemListedEvent.OutputObject
    >;
    ItemListed: TypedContractEvent<
      ItemListedEvent.InputTuple,
      ItemListedEvent.OutputTuple,
      ItemListedEvent.OutputObject
    >;

    "ItemPriceUpdated(uint256,address,uint256)": TypedContractEvent<
      ItemPriceUpdatedEvent.InputTuple,
      ItemPriceUpdatedEvent.OutputTuple,
      ItemPriceUpdatedEvent.OutputObject
    >;
    ItemPriceUpdated: TypedContractEvent<
      ItemPriceUpdatedEvent.InputTuple,
      ItemPriceUpdatedEvent.OutputTuple,
      ItemPriceUpdatedEvent.OutputObject
    >;

    "ItemUnlisted(uint256,address)": TypedContractEvent<
      ItemUnlistedEvent.InputTuple,
      ItemUnlistedEvent.OutputTuple,
      ItemUnlistedEvent.OutputObject
    >;
    ItemUnlisted: TypedContractEvent<
      ItemUnlistedEvent.InputTuple,
      ItemUnlistedEvent.OutputTuple,
      ItemUnlistedEvent.OutputObject
    >;
  };
}
