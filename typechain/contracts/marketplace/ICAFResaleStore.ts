/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICAFResaleStoreInterface extends Interface {
  getFunction(
    nameOrSignature: "calculateResalePrice" | "resell"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ItemResold"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateResalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resell",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateResalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resell", data: BytesLike): Result;
}

export namespace ItemResoldEvent {
  export type InputTuple = [
    _itemId: BigNumberish,
    _owner: AddressLike,
    _price: BigNumberish
  ];
  export type OutputTuple = [_itemId: bigint, _owner: string, _price: bigint];
  export interface OutputObject {
    _itemId: bigint;
    _owner: string;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICAFResaleStore extends BaseContract {
  connect(runner?: ContractRunner | null): ICAFResaleStore;
  waitForDeployment(): Promise<this>;

  interface: ICAFResaleStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateResalePrice: TypedContractMethod<
    [_itemId: BigNumberish],
    [bigint],
    "view"
  >;

  resell: TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateResalePrice"
  ): TypedContractMethod<[_itemId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "resell"
  ): TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ItemResold"
  ): TypedContractEvent<
    ItemResoldEvent.InputTuple,
    ItemResoldEvent.OutputTuple,
    ItemResoldEvent.OutputObject
  >;

  filters: {
    "ItemResold(uint256,address,uint256)": TypedContractEvent<
      ItemResoldEvent.InputTuple,
      ItemResoldEvent.OutputTuple,
      ItemResoldEvent.OutputObject
    >;
    ItemResold: TypedContractEvent<
      ItemResoldEvent.InputTuple,
      ItemResoldEvent.OutputTuple,
      ItemResoldEvent.OutputObject
    >;
  };
}
