/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ICAFProductItems {
  export type ProductItemStruct = {
    productType: BigNumberish;
    price: BigNumberish;
    energy: BigNumberish;
    durability: BigNumberish;
    decayRatePerHour: BigNumberish;
    msgTime: BigNumberish;
    expTime: BigNumberish;
    lastDecayedTime: BigNumberish;
  };

  export type ProductItemStructOutput = [
    productType: bigint,
    price: bigint,
    energy: bigint,
    durability: bigint,
    decayRatePerHour: bigint,
    msgTime: bigint,
    expTime: bigint,
    lastDecayedTime: bigint
  ] & {
    productType: bigint;
    price: bigint;
    energy: bigint;
    durability: bigint;
    decayRatePerHour: bigint;
    msgTime: bigint;
    expTime: bigint;
    lastDecayedTime: bigint;
  };
}

export interface ICAFProductItemsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProductItem"
      | "decay"
      | "getAllProductItemIds"
      | "getProductItem"
      | "manufacture"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ItemDecayed"
      | "ProductItemCreated"
      | "ProductItemManufactured"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProductItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAllProductItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "manufacture",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProductItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProductItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manufacture",
    data: BytesLike
  ): Result;
}

export namespace ItemDecayedEvent {
  export type InputTuple = [id: BigNumberish, lastDecayed: BigNumberish];
  export type OutputTuple = [id: bigint, lastDecayed: bigint];
  export interface OutputObject {
    id: bigint;
    lastDecayed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductItemCreatedEvent {
  export type InputTuple = [itemId: BigNumberish, companyId: BigNumberish];
  export type OutputTuple = [itemId: bigint, companyId: bigint];
  export interface OutputObject {
    itemId: bigint;
    companyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductItemManufacturedEvent {
  export type InputTuple = [itemId: BigNumberish, productType: BigNumberish];
  export type OutputTuple = [itemId: bigint, productType: bigint];
  export interface OutputObject {
    itemId: bigint;
    productType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICAFProductItems extends BaseContract {
  connect(runner?: ContractRunner | null): ICAFProductItems;
  waitForDeployment(): Promise<this>;

  interface: ICAFProductItemsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProductItem: TypedContractMethod<
    [_companyId: BigNumberish, _productType: BigNumberish],
    [void],
    "nonpayable"
  >;

  decay: TypedContractMethod<[_itemId: BigNumberish], [bigint], "nonpayable">;

  getAllProductItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getProductItem: TypedContractMethod<
    [_itemId: BigNumberish],
    [ICAFProductItems.ProductItemStructOutput],
    "view"
  >;

  manufacture: TypedContractMethod<
    [_productType: BigNumberish, _componentIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProductItem"
  ): TypedContractMethod<
    [_companyId: BigNumberish, _productType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decay"
  ): TypedContractMethod<[_itemId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllProductItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getProductItem"
  ): TypedContractMethod<
    [_itemId: BigNumberish],
    [ICAFProductItems.ProductItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "manufacture"
  ): TypedContractMethod<
    [_productType: BigNumberish, _componentIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ItemDecayed"
  ): TypedContractEvent<
    ItemDecayedEvent.InputTuple,
    ItemDecayedEvent.OutputTuple,
    ItemDecayedEvent.OutputObject
  >;
  getEvent(
    key: "ProductItemCreated"
  ): TypedContractEvent<
    ProductItemCreatedEvent.InputTuple,
    ProductItemCreatedEvent.OutputTuple,
    ProductItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductItemManufactured"
  ): TypedContractEvent<
    ProductItemManufacturedEvent.InputTuple,
    ProductItemManufacturedEvent.OutputTuple,
    ProductItemManufacturedEvent.OutputObject
  >;

  filters: {
    "ItemDecayed(uint256,uint256)": TypedContractEvent<
      ItemDecayedEvent.InputTuple,
      ItemDecayedEvent.OutputTuple,
      ItemDecayedEvent.OutputObject
    >;
    ItemDecayed: TypedContractEvent<
      ItemDecayedEvent.InputTuple,
      ItemDecayedEvent.OutputTuple,
      ItemDecayedEvent.OutputObject
    >;

    "ProductItemCreated(uint256,uint256)": TypedContractEvent<
      ProductItemCreatedEvent.InputTuple,
      ProductItemCreatedEvent.OutputTuple,
      ProductItemCreatedEvent.OutputObject
    >;
    ProductItemCreated: TypedContractEvent<
      ProductItemCreatedEvent.InputTuple,
      ProductItemCreatedEvent.OutputTuple,
      ProductItemCreatedEvent.OutputObject
    >;

    "ProductItemManufactured(uint256,uint8)": TypedContractEvent<
      ProductItemManufacturedEvent.InputTuple,
      ProductItemManufacturedEvent.OutputTuple,
      ProductItemManufacturedEvent.OutputObject
    >;
    ProductItemManufactured: TypedContractEvent<
      ProductItemManufacturedEvent.InputTuple,
      ProductItemManufacturedEvent.OutputTuple,
      ProductItemManufacturedEvent.OutputObject
    >;
  };
}
