/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ICAFEventItems {
  export type EventItemStruct = {
    eventType: BigNumberish;
    startDate: BigNumberish;
    endDate: BigNumberish;
  };

  export type EventItemStructOutput = [
    eventType: bigint,
    startDate: bigint,
    endDate: bigint
  ] & { eventType: bigint; startDate: bigint; endDate: bigint };
}

export interface ICAFEventItemsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createEventItem"
      | "endEvent"
      | "getAllActiveEventItemIds"
      | "getAllEventItemIds"
      | "getEventItem"
      | "startEvent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventItemCreated"
      | "EventItemEnded"
      | "EventItemStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createEventItem",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveEventItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEventItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEventItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startEvent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEventItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveEventItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEventItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startEvent", data: BytesLike): Result;
}

export namespace EventItemCreatedEvent {
  export type InputTuple = [eventId: BigNumberish, eventType: BigNumberish];
  export type OutputTuple = [eventId: bigint, eventType: bigint];
  export interface OutputObject {
    eventId: bigint;
    eventType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventItemEndedEvent {
  export type InputTuple = [eventId: BigNumberish];
  export type OutputTuple = [eventId: bigint];
  export interface OutputObject {
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventItemStartedEvent {
  export type InputTuple = [eventId: BigNumberish];
  export type OutputTuple = [eventId: bigint];
  export interface OutputObject {
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICAFEventItems extends BaseContract {
  connect(runner?: ContractRunner | null): ICAFEventItems;
  waitForDeployment(): Promise<this>;

  interface: ICAFEventItemsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEventItem: TypedContractMethod<
    [
      _eventType: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  endEvent: TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;

  getAllActiveEventItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllEventItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getEventItem: TypedContractMethod<
    [_eventId: BigNumberish],
    [ICAFEventItems.EventItemStructOutput],
    "view"
  >;

  startEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEventItem"
  ): TypedContractMethod<
    [
      _eventType: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllActiveEventItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllEventItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getEventItem"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [ICAFEventItems.EventItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "startEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EventItemCreated"
  ): TypedContractEvent<
    EventItemCreatedEvent.InputTuple,
    EventItemCreatedEvent.OutputTuple,
    EventItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EventItemEnded"
  ): TypedContractEvent<
    EventItemEndedEvent.InputTuple,
    EventItemEndedEvent.OutputTuple,
    EventItemEndedEvent.OutputObject
  >;
  getEvent(
    key: "EventItemStarted"
  ): TypedContractEvent<
    EventItemStartedEvent.InputTuple,
    EventItemStartedEvent.OutputTuple,
    EventItemStartedEvent.OutputObject
  >;

  filters: {
    "EventItemCreated(uint256,uint8)": TypedContractEvent<
      EventItemCreatedEvent.InputTuple,
      EventItemCreatedEvent.OutputTuple,
      EventItemCreatedEvent.OutputObject
    >;
    EventItemCreated: TypedContractEvent<
      EventItemCreatedEvent.InputTuple,
      EventItemCreatedEvent.OutputTuple,
      EventItemCreatedEvent.OutputObject
    >;

    "EventItemEnded(uint256)": TypedContractEvent<
      EventItemEndedEvent.InputTuple,
      EventItemEndedEvent.OutputTuple,
      EventItemEndedEvent.OutputObject
    >;
    EventItemEnded: TypedContractEvent<
      EventItemEndedEvent.InputTuple,
      EventItemEndedEvent.OutputTuple,
      EventItemEndedEvent.OutputObject
    >;

    "EventItemStarted(uint256)": TypedContractEvent<
      EventItemStartedEvent.InputTuple,
      EventItemStartedEvent.OutputTuple,
      EventItemStartedEvent.OutputObject
    >;
    EventItemStarted: TypedContractEvent<
      EventItemStartedEvent.InputTuple,
      EventItemStartedEvent.OutputTuple,
      EventItemStartedEvent.OutputObject
    >;
  };
}
