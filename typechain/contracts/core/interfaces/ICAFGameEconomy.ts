/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ICAFGameEconomy {
  export type ActivityEnergyFeeStruct = {
    activityType: BigNumberish;
    fee: BigNumberish;
  };

  export type ActivityEnergyFeeStructOutput = [
    activityType: bigint,
    fee: bigint
  ] & { activityType: bigint; fee: bigint };

  export type ManufacturedProductStruct = { manufacturedPerHour: BigNumberish };

  export type ManufacturedProductStructOutput = [
    manufacturedPerHour: bigint
  ] & { manufacturedPerHour: bigint };

  export type ProductEconomyStruct = {
    energy: BigNumberish;
    durability: BigNumberish;
    decayRatePerHour: BigNumberish;
    costPrice: BigNumberish;
  };

  export type ProductEconomyStructOutput = [
    energy: bigint,
    durability: bigint,
    decayRatePerHour: bigint,
    costPrice: bigint
  ] & {
    energy: bigint;
    durability: bigint;
    decayRatePerHour: bigint;
    costPrice: bigint;
  };
}

export interface ICAFGameEconomyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getActivityFee"
      | "getCurrentPrice"
      | "getManufacturedProduct"
      | "getProductEconomy"
      | "updateActivityFee"
      | "updateAllPrices"
      | "updateManufacturedProduct"
      | "updateProductEconomy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActivityFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManufacturedProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductEconomy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateActivityFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateManufacturedProduct",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductEconomy",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActivityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManufacturedProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductEconomy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateActivityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManufacturedProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductEconomy",
    data: BytesLike
  ): Result;
}

export interface ICAFGameEconomy extends BaseContract {
  connect(runner?: ContractRunner | null): ICAFGameEconomy;
  waitForDeployment(): Promise<this>;

  interface: ICAFGameEconomyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getActivityFee: TypedContractMethod<
    [_activityType: BigNumberish],
    [ICAFGameEconomy.ActivityEnergyFeeStructOutput],
    "view"
  >;

  getCurrentPrice: TypedContractMethod<
    [_productType: BigNumberish],
    [bigint],
    "view"
  >;

  getManufacturedProduct: TypedContractMethod<
    [_productType: BigNumberish],
    [ICAFGameEconomy.ManufacturedProductStructOutput],
    "view"
  >;

  getProductEconomy: TypedContractMethod<
    [_productType: BigNumberish],
    [ICAFGameEconomy.ProductEconomyStructOutput],
    "view"
  >;

  updateActivityFee: TypedContractMethod<
    [_activityType: BigNumberish, _fee: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateAllPrices: TypedContractMethod<[], [void], "nonpayable">;

  updateManufacturedProduct: TypedContractMethod<
    [_productType: BigNumberish, _manufacturedPerHour: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateProductEconomy: TypedContractMethod<
    [
      _productType: BigNumberish,
      _energy: BigNumberish,
      _durability: BigNumberish,
      _decayRatePerHour: BigNumberish,
      _costPrice: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getActivityFee"
  ): TypedContractMethod<
    [_activityType: BigNumberish],
    [ICAFGameEconomy.ActivityEnergyFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[_productType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getManufacturedProduct"
  ): TypedContractMethod<
    [_productType: BigNumberish],
    [ICAFGameEconomy.ManufacturedProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductEconomy"
  ): TypedContractMethod<
    [_productType: BigNumberish],
    [ICAFGameEconomy.ProductEconomyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateActivityFee"
  ): TypedContractMethod<
    [_activityType: BigNumberish, _fee: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAllPrices"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateManufacturedProduct"
  ): TypedContractMethod<
    [_productType: BigNumberish, _manufacturedPerHour: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductEconomy"
  ): TypedContractMethod<
    [
      _productType: BigNumberish,
      _energy: BigNumberish,
      _durability: BigNumberish,
      _decayRatePerHour: BigNumberish,
      _costPrice: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
