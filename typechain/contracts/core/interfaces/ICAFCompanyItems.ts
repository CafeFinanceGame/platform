/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ICAFCompanyItems {
  export type CompanyStruct = {
    owner: AddressLike;
    role: BigNumberish;
    energy: BigNumberish;
  };

  export type CompanyStructOutput = [
    owner: string,
    role: bigint,
    energy: bigint
  ] & { owner: string; role: bigint; energy: bigint };
}

export interface ICAFCompanyItemsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createCompanyItem"
      | "getAllCompanyItemIds"
      | "getCompanyItem"
      | "replenishEnergy"
      | "useEnergy"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CompanyItemCreated"
      | "EnergyConsumed"
      | "EnergyReplenished"
      | "EnergyUsed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createCompanyItem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCompanyItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "replenishEnergy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "useEnergy",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCompanyItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCompanyItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replenishEnergy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useEnergy", data: BytesLike): Result;
}

export namespace CompanyItemCreatedEvent {
  export type InputTuple = [companyId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [companyId: bigint, owner: string];
  export interface OutputObject {
    companyId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnergyConsumedEvent {
  export type InputTuple = [companyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [companyId: bigint, amount: bigint];
  export interface OutputObject {
    companyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnergyReplenishedEvent {
  export type InputTuple = [companyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [companyId: bigint, amount: bigint];
  export interface OutputObject {
    companyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnergyUsedEvent {
  export type InputTuple = [companyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [companyId: bigint, amount: bigint];
  export interface OutputObject {
    companyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICAFCompanyItems extends BaseContract {
  connect(runner?: ContractRunner | null): ICAFCompanyItems;
  waitForDeployment(): Promise<this>;

  interface: ICAFCompanyItemsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createCompanyItem: TypedContractMethod<
    [_owner: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllCompanyItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getCompanyItem: TypedContractMethod<
    [_companyId: BigNumberish],
    [ICAFCompanyItems.CompanyStructOutput],
    "view"
  >;

  replenishEnergy: TypedContractMethod<
    [_companyId: BigNumberish, _itemId: BigNumberish],
    [void],
    "nonpayable"
  >;

  useEnergy: TypedContractMethod<
    [_companyId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createCompanyItem"
  ): TypedContractMethod<
    [_owner: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllCompanyItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCompanyItem"
  ): TypedContractMethod<
    [_companyId: BigNumberish],
    [ICAFCompanyItems.CompanyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "replenishEnergy"
  ): TypedContractMethod<
    [_companyId: BigNumberish, _itemId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "useEnergy"
  ): TypedContractMethod<
    [_companyId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CompanyItemCreated"
  ): TypedContractEvent<
    CompanyItemCreatedEvent.InputTuple,
    CompanyItemCreatedEvent.OutputTuple,
    CompanyItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EnergyConsumed"
  ): TypedContractEvent<
    EnergyConsumedEvent.InputTuple,
    EnergyConsumedEvent.OutputTuple,
    EnergyConsumedEvent.OutputObject
  >;
  getEvent(
    key: "EnergyReplenished"
  ): TypedContractEvent<
    EnergyReplenishedEvent.InputTuple,
    EnergyReplenishedEvent.OutputTuple,
    EnergyReplenishedEvent.OutputObject
  >;
  getEvent(
    key: "EnergyUsed"
  ): TypedContractEvent<
    EnergyUsedEvent.InputTuple,
    EnergyUsedEvent.OutputTuple,
    EnergyUsedEvent.OutputObject
  >;

  filters: {
    "CompanyItemCreated(uint256,address)": TypedContractEvent<
      CompanyItemCreatedEvent.InputTuple,
      CompanyItemCreatedEvent.OutputTuple,
      CompanyItemCreatedEvent.OutputObject
    >;
    CompanyItemCreated: TypedContractEvent<
      CompanyItemCreatedEvent.InputTuple,
      CompanyItemCreatedEvent.OutputTuple,
      CompanyItemCreatedEvent.OutputObject
    >;

    "EnergyConsumed(uint256,uint256)": TypedContractEvent<
      EnergyConsumedEvent.InputTuple,
      EnergyConsumedEvent.OutputTuple,
      EnergyConsumedEvent.OutputObject
    >;
    EnergyConsumed: TypedContractEvent<
      EnergyConsumedEvent.InputTuple,
      EnergyConsumedEvent.OutputTuple,
      EnergyConsumedEvent.OutputObject
    >;

    "EnergyReplenished(uint256,uint256)": TypedContractEvent<
      EnergyReplenishedEvent.InputTuple,
      EnergyReplenishedEvent.OutputTuple,
      EnergyReplenishedEvent.OutputObject
    >;
    EnergyReplenished: TypedContractEvent<
      EnergyReplenishedEvent.InputTuple,
      EnergyReplenishedEvent.OutputTuple,
      EnergyReplenishedEvent.OutputObject
    >;

    "EnergyUsed(uint256,uint256)": TypedContractEvent<
      EnergyUsedEvent.InputTuple,
      EnergyUsedEvent.OutputTuple,
      EnergyUsedEvent.OutputObject
    >;
    EnergyUsed: TypedContractEvent<
      EnergyUsedEvent.InputTuple,
      EnergyUsedEvent.OutputTuple,
      EnergyUsedEvent.OutputObject
    >;
  };
}
