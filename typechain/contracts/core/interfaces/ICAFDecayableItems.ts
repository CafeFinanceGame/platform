/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ICAFDecayableItemsInterface extends Interface {
  getFunction(nameOrSignature: "decay"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ItemDecayed"): EventFragment;

  encodeFunctionData(functionFragment: "decay", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "decay", data: BytesLike): Result;
}

export namespace ItemDecayedEvent {
  export type InputTuple = [id: BigNumberish, lastDecayed: BigNumberish];
  export type OutputTuple = [id: bigint, lastDecayed: bigint];
  export interface OutputObject {
    id: bigint;
    lastDecayed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICAFDecayableItems extends BaseContract {
  connect(runner?: ContractRunner | null): ICAFDecayableItems;
  waitForDeployment(): Promise<this>;

  interface: ICAFDecayableItemsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decay: TypedContractMethod<[_itemId: BigNumberish], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decay"
  ): TypedContractMethod<[_itemId: BigNumberish], [bigint], "nonpayable">;

  getEvent(
    key: "ItemDecayed"
  ): TypedContractEvent<
    ItemDecayedEvent.InputTuple,
    ItemDecayedEvent.OutputTuple,
    ItemDecayedEvent.OutputObject
  >;

  filters: {
    "ItemDecayed(uint256,uint256)": TypedContractEvent<
      ItemDecayedEvent.InputTuple,
      ItemDecayedEvent.OutputTuple,
      ItemDecayedEvent.OutputObject
    >;
    ItemDecayed: TypedContractEvent<
      ItemDecayedEvent.InputTuple,
      ItemDecayedEvent.OutputTuple,
      ItemDecayedEvent.OutputObject
    >;
  };
}
