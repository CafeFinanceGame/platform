/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ICAFCompanyItems {
  export type CompanyStruct = {
    owner: AddressLike;
    role: BigNumberish;
    energy: BigNumberish;
  };

  export type CompanyStructOutput = [
    owner: string,
    role: bigint,
    energy: bigint
  ] & { owner: string; role: bigint; energy: bigint };
}

export declare namespace ICAFEventItems {
  export type EventItemStruct = {
    eventType: BigNumberish;
    startDate: BigNumberish;
    endDate: BigNumberish;
  };

  export type EventItemStructOutput = [
    eventType: bigint,
    startDate: bigint,
    endDate: bigint
  ] & { eventType: bigint; startDate: bigint; endDate: bigint };
}

export declare namespace ICAFProductItems {
  export type ProductItemStruct = {
    productType: BigNumberish;
    price: BigNumberish;
    energy: BigNumberish;
    durability: BigNumberish;
    decayRatePerHour: BigNumberish;
    msgTime: BigNumberish;
    expTime: BigNumberish;
    lastDecayedTime: BigNumberish;
  };

  export type ProductItemStructOutput = [
    productType: bigint,
    price: bigint,
    energy: bigint,
    durability: bigint,
    decayRatePerHour: bigint,
    msgTime: bigint,
    expTime: bigint,
    lastDecayedTime: bigint
  ] & {
    productType: bigint;
    price: bigint;
    energy: bigint;
    durability: bigint;
    decayRatePerHour: bigint;
    msgTime: bigint;
    expTime: bigint;
    lastDecayedTime: bigint;
  };
}

export interface CAFItemsManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SYSTEM_ROLE"
      | "balanceOf"
      | "balanceOfBatch"
      | "createCompanyItem"
      | "createEventItem"
      | "createProductItem"
      | "decay"
      | "endEvent"
      | "getAllActiveEventItemIds"
      | "getAllCompanyItemIds"
      | "getAllEventItemIds"
      | "getAllProductItemIds"
      | "getCompanyItem"
      | "getEventItem"
      | "getNextItemId"
      | "getProductItem"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "manufacture"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "popNotListedItem"
      | "produceProducts"
      | "renounceRole"
      | "replenishEnergy"
      | "revokeRole"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setUp"
      | "startEvent"
      | "supportsInterface"
      | "uri"
      | "useEnergy"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "CompanyItemCreated"
      | "EnergyConsumed"
      | "EnergyReplenished"
      | "EnergyUsed"
      | "EventItemCreated"
      | "EventItemEnded"
      | "EventItemStarted"
      | "ItemDecayed"
      | "ProductItemCreated"
      | "ProductItemManufactured"
      | "ProductsProduced"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYSTEM_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompanyItem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEventItem",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProductItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "endEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveEventItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCompanyItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEventItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProductItemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextItemId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manufacture",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "popNotListedItem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "produceProducts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replenishEnergy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "useEnergy",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYSTEM_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompanyItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEventItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProductItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveEventItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCompanyItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEventItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProductItemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextItemId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manufacture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "popNotListedItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "produceProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replenishEnergy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "useEnergy", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompanyItemCreatedEvent {
  export type InputTuple = [companyId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [companyId: bigint, owner: string];
  export interface OutputObject {
    companyId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnergyConsumedEvent {
  export type InputTuple = [companyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [companyId: bigint, amount: bigint];
  export interface OutputObject {
    companyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnergyReplenishedEvent {
  export type InputTuple = [companyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [companyId: bigint, amount: bigint];
  export interface OutputObject {
    companyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnergyUsedEvent {
  export type InputTuple = [companyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [companyId: bigint, amount: bigint];
  export interface OutputObject {
    companyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventItemCreatedEvent {
  export type InputTuple = [eventId: BigNumberish, eventType: BigNumberish];
  export type OutputTuple = [eventId: bigint, eventType: bigint];
  export interface OutputObject {
    eventId: bigint;
    eventType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventItemEndedEvent {
  export type InputTuple = [eventId: BigNumberish];
  export type OutputTuple = [eventId: bigint];
  export interface OutputObject {
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventItemStartedEvent {
  export type InputTuple = [eventId: BigNumberish];
  export type OutputTuple = [eventId: bigint];
  export interface OutputObject {
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemDecayedEvent {
  export type InputTuple = [id: BigNumberish, lastDecayed: BigNumberish];
  export type OutputTuple = [id: bigint, lastDecayed: bigint];
  export interface OutputObject {
    id: bigint;
    lastDecayed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductItemCreatedEvent {
  export type InputTuple = [itemId: BigNumberish, companyId: BigNumberish];
  export type OutputTuple = [itemId: bigint, companyId: bigint];
  export interface OutputObject {
    itemId: bigint;
    companyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductItemManufacturedEvent {
  export type InputTuple = [itemId: BigNumberish, productType: BigNumberish];
  export type OutputTuple = [itemId: bigint, productType: bigint];
  export interface OutputObject {
    itemId: bigint;
    productType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductsProducedEvent {
  export type InputTuple = [
    _productType: BigNumberish,
    _rateProducedPerHour: BigNumberish
  ];
  export type OutputTuple = [
    _productType: bigint,
    _rateProducedPerHour: bigint
  ];
  export interface OutputObject {
    _productType: bigint;
    _rateProducedPerHour: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CAFItemsManager extends BaseContract {
  connect(runner?: ContractRunner | null): CAFItemsManager;
  waitForDeployment(): Promise<this>;

  interface: CAFItemsManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SYSTEM_ROLE: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  createCompanyItem: TypedContractMethod<
    [_owner: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEventItem: TypedContractMethod<
    [
      _eventType: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createProductItem: TypedContractMethod<
    [_companyId: BigNumberish, _productType: BigNumberish],
    [void],
    "nonpayable"
  >;

  decay: TypedContractMethod<[_itemId: BigNumberish], [bigint], "nonpayable">;

  endEvent: TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;

  getAllActiveEventItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllCompanyItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllEventItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllProductItemIds: TypedContractMethod<[], [bigint[]], "view">;

  getCompanyItem: TypedContractMethod<
    [_companyId: BigNumberish],
    [ICAFCompanyItems.CompanyStructOutput],
    "view"
  >;

  getEventItem: TypedContractMethod<
    [_eventId: BigNumberish],
    [ICAFEventItems.EventItemStructOutput],
    "view"
  >;

  getNextItemId: TypedContractMethod<[], [bigint], "view">;

  getProductItem: TypedContractMethod<
    [_itemId: BigNumberish],
    [ICAFProductItems.ProductItemStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  manufacture: TypedContractMethod<
    [_productType: BigNumberish, _componentIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  popNotListedItem: TypedContractMethod<[], [bigint], "nonpayable">;

  produceProducts: TypedContractMethod<
    [_productType: BigNumberish, _rateProducedPerHour: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  replenishEnergy: TypedContractMethod<
    [_companyId: BigNumberish, _itemId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setUp: TypedContractMethod<[], [void], "nonpayable">;

  startEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  uri: TypedContractMethod<[_id: BigNumberish], [string], "view">;

  useEnergy: TypedContractMethod<
    [_companyId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SYSTEM_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCompanyItem"
  ): TypedContractMethod<
    [_owner: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createEventItem"
  ): TypedContractMethod<
    [
      _eventType: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProductItem"
  ): TypedContractMethod<
    [_companyId: BigNumberish, _productType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decay"
  ): TypedContractMethod<[_itemId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "endEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllActiveEventItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllCompanyItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllEventItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllProductItemIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCompanyItem"
  ): TypedContractMethod<
    [_companyId: BigNumberish],
    [ICAFCompanyItems.CompanyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventItem"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [ICAFEventItems.EventItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextItemId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProductItem"
  ): TypedContractMethod<
    [_itemId: BigNumberish],
    [ICAFProductItems.ProductItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "manufacture"
  ): TypedContractMethod<
    [_productType: BigNumberish, _componentIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "popNotListedItem"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "produceProducts"
  ): TypedContractMethod<
    [_productType: BigNumberish, _rateProducedPerHour: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "replenishEnergy"
  ): TypedContractMethod<
    [_companyId: BigNumberish, _itemId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[_id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "useEnergy"
  ): TypedContractMethod<
    [_companyId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CompanyItemCreated"
  ): TypedContractEvent<
    CompanyItemCreatedEvent.InputTuple,
    CompanyItemCreatedEvent.OutputTuple,
    CompanyItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EnergyConsumed"
  ): TypedContractEvent<
    EnergyConsumedEvent.InputTuple,
    EnergyConsumedEvent.OutputTuple,
    EnergyConsumedEvent.OutputObject
  >;
  getEvent(
    key: "EnergyReplenished"
  ): TypedContractEvent<
    EnergyReplenishedEvent.InputTuple,
    EnergyReplenishedEvent.OutputTuple,
    EnergyReplenishedEvent.OutputObject
  >;
  getEvent(
    key: "EnergyUsed"
  ): TypedContractEvent<
    EnergyUsedEvent.InputTuple,
    EnergyUsedEvent.OutputTuple,
    EnergyUsedEvent.OutputObject
  >;
  getEvent(
    key: "EventItemCreated"
  ): TypedContractEvent<
    EventItemCreatedEvent.InputTuple,
    EventItemCreatedEvent.OutputTuple,
    EventItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EventItemEnded"
  ): TypedContractEvent<
    EventItemEndedEvent.InputTuple,
    EventItemEndedEvent.OutputTuple,
    EventItemEndedEvent.OutputObject
  >;
  getEvent(
    key: "EventItemStarted"
  ): TypedContractEvent<
    EventItemStartedEvent.InputTuple,
    EventItemStartedEvent.OutputTuple,
    EventItemStartedEvent.OutputObject
  >;
  getEvent(
    key: "ItemDecayed"
  ): TypedContractEvent<
    ItemDecayedEvent.InputTuple,
    ItemDecayedEvent.OutputTuple,
    ItemDecayedEvent.OutputObject
  >;
  getEvent(
    key: "ProductItemCreated"
  ): TypedContractEvent<
    ProductItemCreatedEvent.InputTuple,
    ProductItemCreatedEvent.OutputTuple,
    ProductItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductItemManufactured"
  ): TypedContractEvent<
    ProductItemManufacturedEvent.InputTuple,
    ProductItemManufacturedEvent.OutputTuple,
    ProductItemManufacturedEvent.OutputObject
  >;
  getEvent(
    key: "ProductsProduced"
  ): TypedContractEvent<
    ProductsProducedEvent.InputTuple,
    ProductsProducedEvent.OutputTuple,
    ProductsProducedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CompanyItemCreated(uint256,address)": TypedContractEvent<
      CompanyItemCreatedEvent.InputTuple,
      CompanyItemCreatedEvent.OutputTuple,
      CompanyItemCreatedEvent.OutputObject
    >;
    CompanyItemCreated: TypedContractEvent<
      CompanyItemCreatedEvent.InputTuple,
      CompanyItemCreatedEvent.OutputTuple,
      CompanyItemCreatedEvent.OutputObject
    >;

    "EnergyConsumed(uint256,uint256)": TypedContractEvent<
      EnergyConsumedEvent.InputTuple,
      EnergyConsumedEvent.OutputTuple,
      EnergyConsumedEvent.OutputObject
    >;
    EnergyConsumed: TypedContractEvent<
      EnergyConsumedEvent.InputTuple,
      EnergyConsumedEvent.OutputTuple,
      EnergyConsumedEvent.OutputObject
    >;

    "EnergyReplenished(uint256,uint256)": TypedContractEvent<
      EnergyReplenishedEvent.InputTuple,
      EnergyReplenishedEvent.OutputTuple,
      EnergyReplenishedEvent.OutputObject
    >;
    EnergyReplenished: TypedContractEvent<
      EnergyReplenishedEvent.InputTuple,
      EnergyReplenishedEvent.OutputTuple,
      EnergyReplenishedEvent.OutputObject
    >;

    "EnergyUsed(uint256,uint256)": TypedContractEvent<
      EnergyUsedEvent.InputTuple,
      EnergyUsedEvent.OutputTuple,
      EnergyUsedEvent.OutputObject
    >;
    EnergyUsed: TypedContractEvent<
      EnergyUsedEvent.InputTuple,
      EnergyUsedEvent.OutputTuple,
      EnergyUsedEvent.OutputObject
    >;

    "EventItemCreated(uint256,uint8)": TypedContractEvent<
      EventItemCreatedEvent.InputTuple,
      EventItemCreatedEvent.OutputTuple,
      EventItemCreatedEvent.OutputObject
    >;
    EventItemCreated: TypedContractEvent<
      EventItemCreatedEvent.InputTuple,
      EventItemCreatedEvent.OutputTuple,
      EventItemCreatedEvent.OutputObject
    >;

    "EventItemEnded(uint256)": TypedContractEvent<
      EventItemEndedEvent.InputTuple,
      EventItemEndedEvent.OutputTuple,
      EventItemEndedEvent.OutputObject
    >;
    EventItemEnded: TypedContractEvent<
      EventItemEndedEvent.InputTuple,
      EventItemEndedEvent.OutputTuple,
      EventItemEndedEvent.OutputObject
    >;

    "EventItemStarted(uint256)": TypedContractEvent<
      EventItemStartedEvent.InputTuple,
      EventItemStartedEvent.OutputTuple,
      EventItemStartedEvent.OutputObject
    >;
    EventItemStarted: TypedContractEvent<
      EventItemStartedEvent.InputTuple,
      EventItemStartedEvent.OutputTuple,
      EventItemStartedEvent.OutputObject
    >;

    "ItemDecayed(uint256,uint256)": TypedContractEvent<
      ItemDecayedEvent.InputTuple,
      ItemDecayedEvent.OutputTuple,
      ItemDecayedEvent.OutputObject
    >;
    ItemDecayed: TypedContractEvent<
      ItemDecayedEvent.InputTuple,
      ItemDecayedEvent.OutputTuple,
      ItemDecayedEvent.OutputObject
    >;

    "ProductItemCreated(uint256,uint256)": TypedContractEvent<
      ProductItemCreatedEvent.InputTuple,
      ProductItemCreatedEvent.OutputTuple,
      ProductItemCreatedEvent.OutputObject
    >;
    ProductItemCreated: TypedContractEvent<
      ProductItemCreatedEvent.InputTuple,
      ProductItemCreatedEvent.OutputTuple,
      ProductItemCreatedEvent.OutputObject
    >;

    "ProductItemManufactured(uint256,uint8)": TypedContractEvent<
      ProductItemManufacturedEvent.InputTuple,
      ProductItemManufacturedEvent.OutputTuple,
      ProductItemManufacturedEvent.OutputObject
    >;
    ProductItemManufactured: TypedContractEvent<
      ProductItemManufacturedEvent.InputTuple,
      ProductItemManufacturedEvent.OutputTuple,
      ProductItemManufacturedEvent.OutputObject
    >;

    "ProductsProduced(uint8,uint256)": TypedContractEvent<
      ProductsProducedEvent.InputTuple,
      ProductsProducedEvent.OutputTuple,
      ProductsProducedEvent.OutputObject
    >;
    ProductsProduced: TypedContractEvent<
      ProductsProducedEvent.InputTuple,
      ProductsProducedEvent.OutputTuple,
      ProductsProducedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
